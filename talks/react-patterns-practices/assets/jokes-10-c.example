import React, { PureComponent } from "react";

class Jokes extends PureComponent {
  render() {
    const {jokes = [], index} = this.props;
    const joke = jokes[index];

    return (
      joke &&
      <FlipCard>
        <div>
          <div>{joke.question}</div>
          <footer>
            {index + 1} of {jokes.length}
          </footer>
        </div>
        <div>{joke.answer}</div>
      </FlipCard>
    );
  }
}

class AddJoke extends React.Component {
  constructor(props) {
    super(props);
    this.handleSubmit =
      this.handleSubmit.bind(this);
  }
  handleSubmit() {
    const {
      question: {value: q},
      answer: {value: a}
    } = this;
    this.props.onCreate({
      question: q,
      answer: a
    });
    this.question.value = '';
    this.answer.value = '';
  }
  render() {
    return (
      <form onSubmit={this.handleSubmit}>
        <fieldset>
          <legend>New Joke</legend>
          <input placeholder="Question"
            ref={c => (this.question = c)} />
          <input placeholder="Answer"
            ref={c => (this.answer = c)} />
          <input type="submit" value="Create" />
        </fieldset>
      </form>
    );
  }
}

class JokesContainer extends PureComponent {
  constructor(props) {
    super(props);
    this.state = {jokes: [], index: 0};
    this.keyDownHandler =
      this.handleKeyDown.bind(this);
    this.boundAddJoke =
      this.handleAddJoke.bind(this);
  }
  componentDidMount() {
    document.addEventListener(
      'keydown', this.keyDownHandler
    );

    fetch('https://rawgit.com/.../jokes.json')
      .then(response => response.json())
      .then((jokes) => this.setState({ jokes }));
  }
  componentWillUnmount() {
    document.removeEventListener(
      'keydown', this.keyDownHandler
    );
  }
  handleKeyDown(e) {
    if (e.which === 37) {
      this.decrement();
    } else if (e.which === 39) {
      this.increment();
    }
  }
  increment() {
    const {jokes} = this.state;
    const len = jokes.length - 1;
    this.setState(({index}) => ({
      index: index < len ? index + 1 : len,
    }));
  }
  decrement() {
    this.setState(({index}) => ({
      index: index > 0 ? index - 1 : 0,
    }));
  }
  handleAddJoke(joke) {
    this.setState(({jokes}) => {
      jokes.push(joke);
      return {jokes};
    });
  }
  render() {
    return <section>
      <Jokes {...this.state} />
      <AddJoke onCreate={this.boundAddJoke} />
    </section>;
  }
}
