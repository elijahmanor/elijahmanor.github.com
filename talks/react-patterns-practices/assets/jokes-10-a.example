class Jokes extends React.Component {
  shouldComponentUpdate(nextProps) {
    return (
      nextProps.index !== this.props.index ||
      nextProps.jokes !== this.props.jokes
    );
  }
  render() {
    const { jokes = [], index } = this.props;
    const joke = jokes[index];

    return (
      joke &&
      <FlipCard>
        <div>
          <div>{joke.question}</div>
          <footer>
            {index + 1} of {jokes.length}
          </footer>
        </div>
        <div>{joke.answer}</div>
      </FlipCard>
    );
  }
}

class JokesContainer extends React.Component {
  constructor(props) {
    super(props);
    this.state = { jokes: [], index: 0 };
    this.keyDownHandler =
      this.handleKeyDown.bind(this);
  }
  shouldComponentUpdate(_, nextState) {
    return (
      nextState.index !== this.state.index ||
      nextState.jokes !== this.state.jokes
    );
  }
  componentDidMount() {
    document.addEventListener(
      'keydown', this.keyDownHandler
    );

    fetch('https://rawgit.com/.../jokes.json')
      .then(response => response.json())
      .then((jokes) => this.setState({jokes}));
  }
  componentWillUnmount() {
    document.removeEventListener(
      'keydown', this.keyDownHandler
    );
  }
  handleKeyDown(e) {
    if (e.which === 37) {
      this.decrement();
    } else if (e.which === 39) {
      this.increment();
    }
  }
  increment() {
    const { jokes } = this.state;
    const len = jokes.length - 1;
    this.setState(({ index }) => ({
      index: index < len ? index + 1 : len,
    }));
  }
  decrement() {
    this.setState(({ index }) => ({
      index: index > 0 ? index - 1 : 0,
    }));
  }
  render() {
    return <Jokes {...this.state} />;
  }
}
